<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 命名空间，做sql隔离  -->
<mapper namespace="test">
	<sql id="user_where">
		<where>
			<if test="username!=null and username !=''">
			and username like '%${username}%'
			</if>
			<if test="sex!=null and sex!=''">
				and sex=#{sex}
			</if>
		</where>
	</sql>
	<!-- 
		id:sql语句唯一标识
		parameterType:指定传入参数类型
		resultType:返回结果集类型
		#{}:占位符：起到占位作用，如果传入的是基本类型（string,long,double,int,boolean,float等）
		那么#{}中的变量名称可以随意写。
	 -->
	<select id="findUserById" parameterType="java.lang.Integer" resultType="user">
		select * from user where id=#{id}
	</select>
	<!-- 
		如果返回结果为集合,可以调用selectList方法，这个方法返回的结果是一个集合，所以映射文件中应该配置集合泛型的类型
		${}拼接符：字符串原样拼接，如果传入的参数是基本类型（string,long,double,int,boolean,float等），那么${}中的变量名称必须是value
	 -->
	<select id="findUserByUsername" parameterType="java.lang.String" resultType="com.lmy.pojo.User">
		select * from user where username like #{username}
	</select>
	<!-- 
		如果返回结果为集合,可以调用selectList方法，这个方法返回的结果是一个集合，所以映射文件中应该配置集合泛型的类型
		${}拼接符：字符串原样拼接，如果传入的参数是基本类型（string,long,double,int,boolean,float等），那么${}中的变量名称必须是value
	 -->
	<select id="findUserByUsername1" parameterType="java.lang.String" resultType="com.lmy.pojo.User">
		select * from user where username like '%${value}%'
	</select>
	<!-- 
		#{}:如果传入的是pojo类型，那么#{}中的变量名称必须是pojo中对应的属性.属性.属性....
		如果要返回数据库自增主键：可以使用select LAST_INSERT_ID()
	 -->
	<insert id="inserUser" parameterType="com.lmy.pojo.User" >
		<!-- 执行select LAST_INSERT_ID()数据库函数，返回自增的主键
		keyProperty:将返回的主键放入传入参数的ID中保存。
		order：当前函数相对于insert语句的执行顺序。在insert前执行是before，在insert后执行是after。
		resultType：id的类型，也就是keyProperty中的属性类型
			
		 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user (username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<insert id="inserUser1" parameterType="com.lmy.pojo.User" useGeneratedKeys="true" keyProperty="id">
		insert into user (username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<delete id="deleteUserById" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<update id="updateUserById" parameterType="com.lmy.pojo.User">
		update user set username=#{username} where id=#{id}
	</update>
	
	<!-- <select id="findUserListResultMap" parameterType="queryVo" resultMap="userListResultMap"> 
		select id id_,username username_,birthday birthday_ from user
	</select> -->
	
	<resultMap type="user" id=""></resultMap>
	
	<select id="findUserByNameAndSex" parameterType="user" resultType="user">
		select * from user where 1=1 
		<if test="username!=null and username !=''">
			and username like '%${username}%'
		</if>
		<if test="sex!=null and sex!=''">
			and sex=#{sex}
		</if>
	</select>
	
	<select id="findUserByNameAndSex1" parameterType="user" resultType="user">
		select * from user 
		<where>
			<if test="username!=null and username !=''">
			and username like '%${username}%'
			</if>
			<if test="sex!=null and sex!=''">
				and sex=#{sex}
			</if>
		</where>
		
	</select>
	
	<select id="findUserByNameAndSex2" parameterType="user" resultType="user">
		select * from user 
		<include refid="user_where"></include>		
	</select>
	
	<select id="findUserByDynamicCondition" parameterType="java.util.List" resultType="user">
		select * from user 
		<where>
			<if test="list!=null ">
				<foreach collection="list" item="id" open=" id in (" close=" )" separator=",">
					#{id}
				</foreach>	
			</if>
		</where>
	</select>
	
	<select id="findOrdersAndUsers" resultType="com.lmy.pojo.CustomOrders">
		select a1.*,a2.id uid,a2.username,a2.sex,a2.birthday,a2.address
 		from orders a1,user a2 where a1.user_id=a2.id
	</select>
	
	<resultMap type="com.lmy.pojo.Orders" id="ordersAndUsers">
		<id column="id" property="id"/>
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createtime"/>
		<result column="note" property="note"/>
		<association property="user" javaType="com.lmy.pojo.User">
			<id column="uid" property="id"/>
			<result column="username" property="username"/>
			<result column="sex" property="sex"/>
			<result column="birthday" property="birthday"/>
			<result column="address" property="address"/>
		</association>
	</resultMap>
	
	<select id="findOrdersAndUsers1" resultMap="ordersAndUsers">
		select a1.*,a2.id uid,a2.username,a2.sex,a2.birthday,a2.address
 		from orders a1,user a2 where a1.user_id=a2.id
	</select>
	<resultMap id="userAndOrders" type="com.lmy.pojo.User">
		<id column="id" property="id"/>
		<result column="username" property="username"/>
		<result column="sex" property="sex"/>
		<result column="birthday" property="birthday"/>
		<result column="address" property="address"/>
		<collection property="orders" ofType="com.lmy.pojo.Orders">
			<id column="order_id" property="id"/>
			<result column="user_id" property="userId"/>
			<result column="number" property="number"/>
			<result column="createtime" property="createtime"/>
			<result column="note" property="note"/>
		</collection>
	</resultMap>
	<select id="findUserAndOrders" resultMap="userAndOrders">
		select a1.*,a2.id order_id,a2.user_id,a2.number,a2.createtime,a2.note
		 from user a1,orders a2 where a1.id=a2.user_id
	</select>
</mapper>
